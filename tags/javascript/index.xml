<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Blog de Mikkel</title><link>https://tehawol.github.io/LabVeilTech/tags/javascript/</link><description>Recent content in JavaScript on Blog de Mikkel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tehawol.github.io/LabVeilTech/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Expérimentation - Gestion de routes asyncrones sur Express</title><link>https://tehawol.github.io/LabVeilTech/posts/experimentation/</link><pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate><guid>https://tehawol.github.io/LabVeilTech/posts/experimentation/</guid><description>Expérimentation - Gestion de routes asyncrones sur Express Asyncrone et Express Dans le framework Node.js, Express, je vais mettre en place un REST API qui retourne divers ressources grâce à des requêtes. Je vais employer du code asyncrone afin de communiquer avec notre base de données hébergé sur un serveur MongoDB externe.
Devant faire face à divers latence ou tout simplement des érreurs, il est important qu&amp;rsquo;un gestion d&amp;rsquo;erreur est en place pour le code asyncrone.</description><content>&lt;h1 id="expérimentation---gestion-de-routes-asyncrones-sur-express">Expérimentation - Gestion de routes asyncrones sur Express&lt;/h1>
&lt;h2 id="asyncrone-et-express">Asyncrone et Express&lt;/h2>
&lt;p>Dans le framework Node.js, Express, je vais mettre en place un REST API qui retourne divers ressources grâce à des requêtes. Je vais employer du code asyncrone afin de communiquer avec notre base de données hébergé sur un serveur MongoDB externe.&lt;/p>
&lt;p>Devant faire face à divers latence ou tout simplement des érreurs, il est important qu&amp;rsquo;un gestion d&amp;rsquo;erreur est en place pour le code asyncrone. Express propose déjà une gestion d’erreur avec son Error Handler qui est accéssible en utilisant lui passant l’erreur grâce à next().&lt;/p>
&lt;h2 id="le-contexte-et-but-de-lexpérimentation">Le contexte et but de l’expérimentation&lt;/h2>
&lt;p>Dans cette expérimentation, je vais implémenter une requête asynconre dans une route Express. Je vais travailler sur l’application Local-Search (&lt;a href="https://github.com/Grolims/ArchiOWeb">GitHub - Grolims/ArchiOWeb: Deploy your REST API on a cloud application platform&lt;/a>), un REST API qui permet à des agriculteurs de partager leur points de ventes et les produits qui y sont disponibles. Les agriculteurs doivent crée un compte qui est associé à tout leurs points de ventes et leurs produits.&lt;/p>
&lt;p>Afin de pouvoir créer un nouveau produit, l’utilisateur et le point de vente associé doit exister. L’expérimentation va être fait sur la route correspondant (création de item) afin de pouvoir comprendre les différentes implémentations et si possible, identifier la solution optimale.&lt;/p>
&lt;h2 id="la-route-initiale">La route initiale&lt;/h2>
&lt;p>Voici la route pour créer un nouveau produit (item).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) =&amp;gt; {
&lt;span style="color:#75715e">// Vérifie que l&amp;#39;utilisateur existe
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">userId&lt;/span> }); &lt;span style="color:#75715e">// Vérifie que le point de vente existe
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsSalepoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Salepoint&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">salepointId&lt;/span> });
&lt;span style="color:#75715e">// Gestion d&amp;#39;erreur si l&amp;#39;utilisateur existe pas
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsUser&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;User ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#75715e">// Gestion d&amp;#39;erreur si le point de vente existe pas
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsSalepoint&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Salepoint ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#75715e">// Sauvegarde la nouveau produit et renvoie l&amp;#39;entré à l&amp;#39;utilisateur
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">newItem&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cette implémentation présente plusieurs problèmes, les requêtes sont des opérations asyncrone qui font un appel à la base de données. Pour les gérer correctement dans le code nous devont rendre notre route (plus spécifiquement son callback) asyncrone avec le mot clé &lt;strong>async&lt;/strong>. Les requêtes doivent également être précédé par le mot clé &lt;strong>await&lt;/strong> pour indiquer qu’elles sont asyncrones.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">async&lt;/span> (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">userId&lt;/span> });
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsSalepoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Salepoint&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">salepointId&lt;/span> });
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsUser&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;User ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsSalepoint&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Salepoint ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">newItem&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le code est à présent exécutable en locale (si la BDD tourne sur notre machine). Comme indiqué dessus, une des contraintes pour la création d&amp;rsquo;un produit est que l&amp;rsquo;utilisateur et le point de vente associé existe. Les deux requêtes présentes s&amp;rsquo;occupent de valider cette existence, en conséquence elles font donc appels à la base de données. Une gestion d&amp;rsquo;erreur est donc cruciale pour gérer les cas de figure ou ces requêtes ne peuvent avoir lieu.&lt;/p>
&lt;h3 id="rappel-sur-les-promesses">Rappel sur les promesses&lt;/h3>
&lt;p>Les requêtes asyncrone sont temporairement des promesses en attendant leur réponse. La réponse donc notre cas va être un booléan si l&amp;rsquo;utilisateur ou le point de vente existe, au contraire un erreur nous est retourné en cas d&amp;rsquo;échec.&lt;/p>
&lt;h2 id="limplémentation-classique">L&amp;rsquo;implémentation classique&lt;/h2>
&lt;p>Nous pouvons implémenter notre route en utilisant une logique avec .then().&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">async&lt;/span> (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#ae81ff">_&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">userId&lt;/span> })
.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span> =&amp;gt; &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;User ID missing or invalid&amp;#39;&lt;/span>)
})
.&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>));
&lt;span style="color:#a6e22e">Salepoint&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#ae81ff">_&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">salepointId&lt;/span> })
.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span> =&amp;gt; &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Salepoint ID missing or invalid&amp;#39;&lt;/span>)
})
.&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>));
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>().&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">newItem&lt;/span>)).&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>));
});
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="verdicte">Verdicte&lt;/h3>
&lt;p>Cette implémentation est pas très accèssible (il arrive que des problèmes d&amp;rsquo;identation surviennent sur des projets commun avec cette solution) et très verbeuse. Il est recommander de plutôt utiliser une try catch afin d&amp;rsquo;améliorer la lisibilité du code et être à jour avec les best practices.&lt;/p>
&lt;h2 id="try--catch">Try &amp;amp; Catch&lt;/h2>
&lt;p>La première solution que j&amp;rsquo;ai implémenté était un Try &amp;amp; Catch. Dans le block Try si la requête ne se résoud pas correctement, un erreur est retourner au catch (d&amp;rsquo;ou le nom) et je le passe à la gestion d&amp;rsquo;erreur d&amp;rsquo;Express en utilisant la fonction next().&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">async&lt;/span> (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">try&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">userId&lt;/span> });
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsSalepoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Salepoint&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">salepointId&lt;/span> });
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsUser&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;User ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsSalepoint&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Salepoint ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">newItem&lt;/span>);
} &lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Toutes les requêtes asyncrone peuvent être encapsulé par le try catch car un erreur va directement se résoudre dans le catch.&lt;/p>
&lt;p>La fonction next() passe l&amp;rsquo;erreur au gestionnaire d&amp;rsquo;erreur d&amp;rsquo;Express qui vient s&amp;rsquo;ajouter à la fin du stack du middleware. Ce gestionnaire est très basique, il pourrait donc être intéressant d&amp;rsquo;améliorer ceci.&lt;/p>
&lt;h3 id="verdicte-1">Verdicte&lt;/h3>
&lt;p>Cette implémentation est bien plus lisible que l&amp;rsquo;usage de then(). Par contre&lt;/p>
&lt;h2 id="fonction-encapsulante">Fonction Encapsulante&lt;/h2>
&lt;p>Une autre façon décrire le try catch serait avec un fonction asyncrone et un .then()&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">async&lt;/span> (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#ae81ff">_&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">userId&lt;/span> });
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsSalepoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Salepoint&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#ae81ff">_&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">salepointId&lt;/span> });
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsUser&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;User ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsSalepoint&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Salepoint ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">newItem&lt;/span>);
}
&lt;span style="color:#a6e22e">main&lt;/span>().&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span>)
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cette implémentation est complète mais il va rapidement devenir ennuyant d&amp;rsquo;écrire tout ce code pour chaque route. En conséquence la fonction peut être utilisé comme un sorte de middleware qui encapsule les parties asyncrones.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">asyncHandler&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#ae81ff">_&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">userId&lt;/span> });
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">existsSalepoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Salepoint&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>({ &lt;span style="color:#ae81ff">_&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">salepointId&lt;/span> });
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsUser&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;User ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">existsSalepoint&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Salepoint ID missing or invalid&amp;#39;&lt;/span>)
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">newItem&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>).&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">newItem&lt;/span>);
});
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">asyncHandler&lt;/span> (&lt;span style="color:#a6e22e">callback&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>) {
&lt;span style="color:#a6e22e">callback&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span>).&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comme mentionné avant, si un érreur survient le &lt;strong>catch&lt;/strong> va l&amp;rsquo;attraper et la passer au error handler de Express.&lt;/p>
&lt;h3 id="verdicte-2">Verdicte&lt;/h3>
&lt;p>Cette implémentation est très élégante est légère pour des applications de grande échelle. Il peut être employé comme une sorte d&amp;rsquo;utilitaire pour gérer la majorité de notre code asyncrone dans nos routes. De plus, nous pouvons y ajouter une gestion d&amp;rsquo;erreur plus complet que celui d&amp;rsquo;Express si on le souhaite.&lt;/p>
&lt;h2 id="express-async-handler">Express Async Handler&lt;/h2>
&lt;p>La fonction encapsulante est une implémentation assez répandu qui a donné lieu à plusieurs package qui accomplisent le même fonctionnement. Un exemple est express-async-handler.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-clike" data-lang="clike">npm install express-async-handler --save
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">asyncHandler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;express-async-handler&amp;#39;&lt;/span>)
&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/signup&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">asyncHandler&lt;/span>(&lt;span style="color:#66d9ef">async&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">firstThing&lt;/span>()
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">secondThing&lt;/span>()
}))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ce package accomplit exactement la même chose que l&amp;rsquo;implémentation précédante en nous évitant de devoir déclarer une fonction. De plus, le package permet d&amp;rsquo;assurer que next() est toujours le dernier arguments dans la pile de middlewares.&lt;/p>
&lt;h3 id="verdicte-3">Verdicte&lt;/h3>
&lt;p>Plus léger et complet que l&amp;rsquo;implémentation fait maison, cette solution est optimale pour gérer tout code asyncrone dans des routes Express. La déclaration non explicite du asyncHandler peut par contre péjorer la compréhension des collaborateurs.&lt;/p>
&lt;h2 id="a-retenir">A retenir&lt;/h2>
&lt;p>Les routes présentants du code asyncrone sur Express peuvent être implémentés de différentes manières qui accomplisent tous la même tâche mais ayant tous leur propre complexité.&lt;/p>
&lt;p>Travaillant surtout sur des gros projets ou du code asyncrone est inévitable dans presque toutes les routes, il devient très avantageux d&amp;rsquo;utiliser un package comme async-handler ou d&amp;rsquo;en déclarer un nous même. Ceci permet aussi aux collaborateurs de contribuer du code uniforme et une compréhension plus complet de l&amp;rsquo;application.&lt;/p>
&lt;p>Mais au final chaque implémentations fontionnent, le choix revient donc au développeur et à ses préférences.&lt;/p>
&lt;h3 id="sources-">Sources :&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.wisdomgeek.com/development/web-development/using-async-await-in-expressjs/">https://www.wisdomgeek.com/development/web-development/using-async-await-in-expressjs/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.npmjs.com/package/express-async-handler">https://www.npmjs.com/package/express-async-handler&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Nuxt3, la prochaine étape</title><link>https://tehawol.github.io/LabVeilTech/posts/nuxt3/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><guid>https://tehawol.github.io/LabVeilTech/posts/nuxt3/</guid><description>Nuxt3, la prochaine étape. Nuxt en quelques mots Nuxt est une librairie JavaScript open source qui fournit un framework basé sur Vue fortement inspiré par Next.js, son équivalent React.
Avec la sortie récente de Vue3, une mise à jour de Nuxt2 (basé sur Vue 2) était donc attendue. En octobre 2021, la version beta de Nuxt3 est sortie.
Que promet Nuxt3 ? Script Setup avec Composition API pour les SFC Nuxt 3 apporte beaucoup de changements fondamentaux à son framework notamment le changement à TypeScript (discuté plus loin) comme language de framework, en gardant une compatibilité avec JavaScript tout comme d’autres frameworks.</description><content>&lt;h1 id="nuxt3-la-prochaine-étape">Nuxt3, la prochaine étape.&lt;/h1>
&lt;h3 id="nuxt-en-quelques-mots">Nuxt en quelques mots&lt;/h3>
&lt;p>Nuxt est une librairie JavaScript open source qui fournit un framework basé sur Vue fortement inspiré par Next.js, son équivalent React.&lt;/p>
&lt;p>Avec la sortie récente de Vue3, une mise à jour de Nuxt2 (basé sur Vue 2) était donc attendue. En octobre 2021, la version beta de Nuxt3 est sortie.&lt;/p>
&lt;p>&lt;img src="https://tehawol.github.io/LabVeilTech/static/images/nuxt3.jpg" alt="Nuxt3-image">&lt;/p>
&lt;h2 id="que-promet-nuxt3-">Que promet Nuxt3 ?&lt;/h2>
&lt;h3 id="script-setup-avec-composition-api-pour-les-sfc">Script Setup avec Composition API pour les SFC&lt;/h3>
&lt;p>Nuxt 3 apporte beaucoup de changements fondamentaux à son framework notamment le changement à TypeScript (discuté plus loin) comme language de framework, en gardant une compatibilité avec JavaScript tout comme d’autres frameworks. La possibilité d’utiliser le script setup avec la composition API est toujours présente ce qui a pour but de rendre les composants plus lisibles et le code plus accessible.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&amp;lt;&lt;span style="color:#f92672">template&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">button&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">Count&lt;/span>&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">Component&lt;/span>&amp;gt;{{ &lt;span style="color:#a6e22e">counter&lt;/span> }}&amp;lt;/&lt;span style="color:#f92672">Component&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">template&lt;/span>&amp;gt;
&lt;span style="color:#75715e">// Avec script setup
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./components/Component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">ref&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;vue&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ref&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#75715e">// Sans script setup
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./components/Component&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">ref&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;vue&amp;#39;&lt;/span>;
&lt;span style="color:#75715e">// in our component
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">setup&lt;/span> (&lt;span style="color:#a6e22e">props&lt;/span>) {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ref&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> {
&lt;span style="color:#a6e22e">counter&lt;/span>
}
}
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comme montré dans l’exemple, le script setup nous permet de nous affranchir de la fonction setup() et les variables qu’on en retourne. De plus, l’usage du Composition API introduit une structure plus cohérente à notre code qui permet de grouper notre code par logique au lieu de dépendre d’une structure orienté Options API.&lt;/p>
&lt;p>Dans l’ensemble, ces ajouts permettent du code plus concis (élimination de beaucoup de logique de Vue) et une meilleure expérience de développement.&lt;/p>
&lt;h3 id="nuxt-nitro">Nuxt Nitro&lt;/h3>
&lt;p>Le nouveau serveur engine de Nuxt est Nitro qui amène avec lui un nombre de changements et de possibilités aux applications Nuxt. Tout comme Next, il est désormais possible de créer des routes API en plaçant nos fichiers dans les directoires concernés au lieu de les coder tel que dans Express.&lt;/p>
&lt;p>Des déploiements facilités sur diverses plateformes telles que Vercel, Netlify, AWS, Azure ou encore des Node ou Deno.&lt;/p>
&lt;p>Une génération statique de site statique va être implémentée de manière incrémentale.&lt;/p>
&lt;p>Selon certain Nitro serait capable de produire des bundles qui seront jusqu’à 75x plus léger (client et serveur), une affirmation qui vaudrait l’objet d’une future expérimentation.&lt;/p>
&lt;h3 id="nuxt-bridge">Nuxt Bridge&lt;/h3>
&lt;p>Pour les applications qui tournent actuellement sur Nuxt2 ou Vue 2, l’introduction de Nuxt Bridge permet de faire le pas intermédiaire vers Nuxt3 en conservant d’anciennes fonctionnalités tout en introduisant progressivement des nouveaux.&lt;/p>
&lt;p>Nuxt Bridge permet de prendre avantage du TypeScript avec la Composition API et Script Setup de manière partielle. Des composants ou plus généralement du code TS peuuvent donc être introduits graduellement dans nos applications. Cet intermédiaire introduit également Nuxi, le nouveau CLI de Nuxt 3.&lt;/p>
&lt;h3 id="typescript">TypeScript&lt;/h3>
&lt;p>Nuxt3 introduit l’usage complet de TypeScript à la place de JavaScript. Une direction qu’une grande partie des frameworks semblent prendre. Nuxt Bridge devrait permettre cette transition pour des applications existantes.&lt;/p>
&lt;p>TypeScript donne la possibilité de construire des applications qui évoluent tout en offrant du code plus strict et une meilleure expérience dev.&lt;/p>
&lt;p>Ce changement semble venir très tard pour un framework tel que Nuxt mais étant jusqu’à récemment dépendant de Vue 2, cette évolution n’était pas possible avant.&lt;/p>
&lt;h2 id="a-retenir">A retenir&lt;/h2>
&lt;p>Nuxt3 semble sans aucun doute être l’équivalent Vue de Next.js. Encore en phase de développement avec beaucoup d’implémentations à venir, le framework est très prometteur.&lt;/p>
&lt;p>Le passage à TypeScript devrait encourager l’adoption plus générale du language dans les écosystèmes Vue et aussi permettre de construire des applications plus grandes et plus efficaces.&lt;/p>
&lt;p>Ceci combiné au Composition API et le Script Setup devrait introduire un standard (best practice) de code pour les applications Vue 3 qui d’expérience sont très permissibles et peuvent parfois amener à des confusions entre collaborateurs.&lt;/p>
&lt;p>Dans l’ensemble, le framework prend avantage des améliorations amenées par Vue3 et construit dessus pour fournir une expérience de développement amélioré.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.vuemastery.com/blog/nuxt-3-is-here/">&lt;/a>&lt;a href="https://www.vuemastery.com/blog/nuxt-3-is-here/">Nuxt 3 is here! What does that mean for you? | Vue Mastery&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://v3.nuxtjs.org/concepts/introduction">&lt;/a>&lt;a href="https://v3.nuxtjs.org/concepts/introduction">Nuxt 3 - What is Nuxt?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sitepoint.com/nuxt-3-whats-new-get-started/">&lt;/a>&lt;a href="https://www.sitepoint.com/nuxt-3-whats-new-get-started/">SitePoint&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Proposition de pipe operator pour JavaScript</title><link>https://tehawol.github.io/LabVeilTech/posts/pipe-operator/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://tehawol.github.io/LabVeilTech/posts/pipe-operator/</guid><description>Proposition de pipe operator pour JavaScript L’idée d’ajouter un pipe operator à JavaScript provient de deux propositions issues des languages F# par Microsoft et Hack par Facebook avec chacun leurs avantages et désavantages.
Les défenseurs de la proposition affirment que des fonctions imbriquées peuvent rapidement devenir complexes et illisibles. Pour combler ceci, ils veulent introduire l’opérateur “|&amp;gt;” à JavaScript.
Pour comprendre ce que cet opérateur peut apporter au language, regardons les deux propositions.</description><content>&lt;h1 id="proposition-de-pipe-operator-pour-javascript">Proposition de pipe operator pour JavaScript&lt;/h1>
&lt;p>L’idée d’ajouter un pipe operator à JavaScript provient de deux propositions issues des languages F# par Microsoft et Hack par Facebook avec chacun leurs avantages et désavantages.&lt;/p>
&lt;p>Les défenseurs de la proposition affirment que des fonctions imbriquées peuvent rapidement devenir complexes et illisibles. Pour combler ceci, ils veulent introduire l’opérateur “|&amp;gt;” à JavaScript.&lt;/p>
&lt;p>Pour comprendre ce que cet opérateur peut apporter au language, regardons les deux propositions.&lt;/p>
&lt;h2 id="fonctionnement-du-hack-pipe">Fonctionnement du Hack pipe&lt;/h2>
&lt;p>Voici un exemple de fonctions imbriquées avec et sans l’opérateur pipe:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#75715e">// Sans opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)));
&lt;span style="color:#75715e">// Avec opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="avantages">Avantages&lt;/h3>
&lt;p>L’opérateur n’a pas pour but de racocurcir des syntaxes mais plutôt les rendre plus accessibles / lisibles. Le hack pipe utilise le symbole % pour indiquer au pipe ou le résultat doit aller.&lt;/p>
&lt;p>L’opérateur tel qu’il est peut gérer les mots-clés &lt;strong>await&lt;/strong> et &lt;strong>yield&lt;/strong> sans syntaxe spéciale.&lt;/p>
&lt;h3 id="désavantages">Désavantages&lt;/h3>
&lt;p>Cette proposition peut très rapidement devenir lourd dû à l’usage du caractère % pour dénoter le résultat.&lt;/p>
&lt;p>Certains affirment que le Hack pipe n’est qu’une implémentation partielle du F# pipe plus complet et suggère un implémentation optionnelle sans le caractère % tel que le F# pipe.&lt;/p>
&lt;h2 id="fonctionnement-du-f-pipe">Fonctionnement du F# pipe&lt;/h2>
&lt;p>En reprenant le code de dessus:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#75715e">// Sans opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)));
&lt;span style="color:#75715e">// Avec opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="avantages-1">Avantages&lt;/h3>
&lt;p>La proposition du F# pipe n’utilise pas le caractère %, il applique automatiquement la fonction à sa droite à la variable à sa gauche. De ce fait il est moins verveux que le Hack pipe. Ceci le rend par exemple beaucoup plus performant lors de la déstructuration d’objets :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#a6e22e">first&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">last&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>};
&lt;span style="color:#75715e">// F# pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> ({&lt;span style="color:#a6e22e">first&lt;/span>,&lt;span style="color:#a6e22e">last&lt;/span>}) =&amp;gt; &lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">last&lt;/span>;
&lt;span style="color:#75715e">// Hack pipe sans déstructuration
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>.&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">%&lt;/span>.&lt;span style="color:#a6e22e">last&lt;/span>;
&lt;span style="color:#75715e">// Hack pipe avec déstructuration
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> (({&lt;span style="color:#a6e22e">first&lt;/span>,&lt;span style="color:#a6e22e">last&lt;/span>}) =&amp;gt; &lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">last&lt;/span>)(&lt;span style="color:#f92672">%&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le F# pipe se prête aussi mieux à des currifications de fonctions, à la cause une arité plus grand que 1 (fonctions prenant plus d’un arguments).&lt;/p>
&lt;h3 id="désavantages-1">Désavantages&lt;/h3>
&lt;p>Malheureusement la currification n’est pas toujours le meilleur choix en JavaScript, l’absence d’un opérateur “d’application partielle” en serait la cause. De ce fait, le F# pipe devient plus verbeux que sa concurrence.&lt;/p>
&lt;p>L’utilisation de mémoire n’est pas optimale avec cet opérateur à cause de la création et l’invocation de fonctions à chaque utilisation. De plus, les mots-clés &lt;strong>await&lt;/strong> et &lt;strong>yield&lt;/strong> ne fonctionnent pas avec.&lt;/p>
&lt;p>Finalement l’introduction du F# pipe pourrait amener à un ecosystème JavaScript dans lequel une moitié emploie fortement la currification et l’autre non.&lt;/p>
&lt;h2 id="utilisations">Utilisations&lt;/h2>
&lt;p>Un pipe opérateur dans JavaScript aurait 3 buts:&lt;/p>
&lt;ul>
&lt;li>Améliorer la syntaxe de fonctions imbriquées&lt;/li>
&lt;li>Post-processing de valeurs&lt;/li>
&lt;li>Permets l’enchainement d’opérations&lt;/li>
&lt;/ul>
&lt;p>Comme indiqué et montré ci-dessus, l’opérateur permet d’écrire des fonctions imbriquées complexes d’une manière beaucoup plus lisible et explicite. Ceci est grâce à l’enchainement d’opérations qui rend notre code plus logique et également moins verbeux.&lt;/p>
&lt;p>L’opérateur permet également du post processing de valeurs ou de fonctions sur une ligne au lieu de plusieurs au lieu de devoirs passer par des variables temporaires.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>L’introduction d’un opérateur pipe dans JavaScript pourrait apporter avec lui un nombre d’avantages et permettre d’écrire du code plus compréhensible. Cependant toutes les solutions proposées ont leurs désavantages.&lt;/p>
&lt;p>Des propositions alternatives pour répondre au même problème existent tel que “Function.pipe()” qui devrait nous permettre de déclarer une logique similaire avec des arrows fonctions. Mais tout comme le F# pipe, celui-ci ne permet pas l’utilisation de &lt;strong>await&lt;/strong> et &lt;strong>yield.&lt;/strong>&lt;/p>
&lt;p>Pour l’instant il est possible de contourner l’absence de ce opérateur en utilisant des variables temporaires pour nos calculs, le désavantage étant sa verbosité. On peut améliorer ceci en utilisant des variables avec des noms courts ce qui péjore la lisiblité du code.&lt;/p>
&lt;h2 id="à-retenir">À retenir&lt;/h2>
&lt;p>L’opérateur Hack pipe a été retenu comme proposition par TC39 à l’instar du F# pipe. Pour cause les faiblesses du F# pipe.&lt;/p>
&lt;p>Une future implémentation de cette opérateur pourrait drastiquement changer la logique et l’approche que nous prenons vis-à-vis de certaines opérations en améliorant la lisibilité du code dans certains cas de figure ou en permettant des enchainements.&lt;/p>
&lt;p>Cette introduction ne serait pas non plus un miracle pour le language car toutes les opérations mentionnées sont actuellements possibles bien qu’ils demandent une implémentation un peu plus complexe. Le pipe serait donc plus une amélioration du “quality of life” des développeurs.&lt;/p>
&lt;h3 id="sources-">Sources :&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://2ality.com/2022/01/pipe-operator.html?ref=webdesignernews.com">&lt;/a>&lt;a href="https://2ality.com/2022/01/pipe-operator.html?ref=webdesignernews.com">https://2ality.com/2022/01/pipe-operator.html?ref=webdesignernews.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tc39/proposal-pipeline-operator">GitHub - tc39/proposal-pipeline-operator: A proposal for adding a useful pipe operator to JavaScript.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205">Hack is dead. Long live F#. · Issue #205 · tc39/proposal-pipeline-operator · GitHub&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Observable, l’environnement dataviz accessible ?</title><link>https://tehawol.github.io/LabVeilTech/posts/observable/</link><pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate><guid>https://tehawol.github.io/LabVeilTech/posts/observable/</guid><description>Observable, l’environnement dataviz accessible ? Mike Bostock, le créateur de la libraire D3 (librairie pour la visualisation des données), annonce la sortie d&amp;rsquo;Observable. Un environnement de Dev en ligne.
L’auteur explique qu’en produisant des visualisations plus complexes, le code le devenait également. Les languages de code utilisés, la syntaxe et la manière d’utilisation sont des sources de complexités qui contribue à ce problème. Le manque de preview pour certains utilisateurs est également une barrière à l’accessibilité du code et du domaine.</description><content>&lt;h1 id="observable-lenvironnement-dataviz-accessible-">Observable, l’environnement dataviz accessible ?&lt;/h1>
&lt;p>Mike Bostock, le créateur de la libraire D3 (librairie pour la visualisation des données), annonce la sortie d&amp;rsquo;Observable. Un environnement de Dev en ligne.&lt;/p>
&lt;p>L’auteur explique qu’en produisant des visualisations plus complexes, le code le devenait également. Les languages de code utilisés, la syntaxe et la manière d’utilisation sont des sources de complexités qui contribue à ce problème. Le manque de preview pour certains utilisateurs est également une barrière à l’accessibilité du code et du domaine.&lt;/p>
&lt;p>Place à Observable. Un “environement de découverte intégré” qui promet de rendre la dataviz plus portable et rapide grâce à un &lt;strong>code&lt;/strong> plus accessible. Un principe introduit sont des cellules de code que l’utilisateur peut ajouter à sa page de code (dans son navigateur). Dedans, il peut coder du JavaScript tout comme dans un vrai environnement. Bostock explique la raison d’être de Observable par 4 mots :&lt;/p>
&lt;ul>
&lt;li>Reactivité&lt;/li>
&lt;li>Visibilité&lt;/li>
&lt;li>Réusabilité&lt;/li>
&lt;li>Portabilité&lt;/li>
&lt;/ul>
&lt;p>Un exemple des cellules de code et de la &lt;strong>réactivité&lt;/strong> de Observable&lt;/p>
&lt;p>&lt;img src="" alt="1 fkkqWrbWXua8sMGlYqnqAgif">&lt;/p>
&lt;p>source : &lt;a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0">&lt;/a>&lt;a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0">https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0&lt;/a>&lt;/p>
&lt;h2 id="reactivité">Reactivité&lt;/h2>
&lt;p>Pour ce faire il introduit la réactivité, comme beaucoup d’autres framework, les variables sont réactives au changement et ceci de manière globale (sur une page).&lt;/p>
&lt;p>Le code asynchrone est également pris en charge. Les cellules ne sont pas affichées tant que les requêtes soient résolues. Ce comportement est très important pour l’importation de libraire et bien sûr de données.&lt;/p>
&lt;p>De manière plus importante pour la visualisation de données, la réactivité de l’environnement nous permet d’utiliser D3 pour créer directement des graphes en ajoutant le SVG généré au DOM.&lt;/p>
&lt;p>Ceci nous permet d’ajouter plus interaction à nos graphes tels que des animations en une fois de plus prenant avantage de la libraire D3. Bostock donne également des exemples de graphes qui s’anime en fonction d’une valeur ou encore des proto-dashboard avec lequel l’utilisateur peut explorer les données avec un feedback visuel.&lt;/p>
&lt;h2 id="visibilité">Visibilité&lt;/h2>
&lt;p>Comme mentionné pour la réactivité, le fait de pouvoir afficher directement nos graphes à côté de notre code nous permet de les corriger plus facilement. Ceci rend également l’environnement hautement accessible en permettant à des débutants dans la visualisation de &lt;strong>voir&lt;/strong> directement les changements dans le code ou pour les débutants d’avoir un feedback plus rapide et visuel de leur code.&lt;/p>
&lt;p>On souligne également la possibilité d’afficher des executions de code pour des algorithmes qui ont une certaine durée. Ceci peut paraître comme étant un simple exercice mais au final ceci est utile pour visualiser comment notre code s’exécute. Ceci est très intéressant dans des contextes mathématiques pour par exemple, la résolution de problèmes géométriques.&lt;/p>
&lt;h2 id="réusabilité">Réusabilité&lt;/h2>
&lt;p>Un grand avantage du code et surtout des librairies, est leur réusabilité, leur qualité à être réutilisé plusieurs fois dans différents projets et de différentes manières. Pour conserver ceci, les pages Observable sont considérés comme des fichiers JS par d’autres pages (avec un require() ).&lt;/p>
&lt;p>Grâce à ce principe, les notebooks peuvent construit un peu comme tel des vrais projets dans lesquelles nous pouvons réutiliser des cellules ou page de code déclaré en amont.&lt;/p>
&lt;p>Le plus grand avantage est bien sûr le partage avec les autres utilisateurs, les pages de code sont considérés comme des fichiers ou libraire de code par &lt;strong>de facto&lt;/strong>. De ce fait, il est possible d’importer des pages d’autres utilisateurs tels que des packages NPM.&lt;/p>
&lt;h2 id="portabilité">Portabilité&lt;/h2>
&lt;p>Reposant sur votre navigateur et une connexion à Observable, l’environnement est très portable. Pour être rendu dans le navigateur, il utilise du JavaScript vanilla tout en donnant la possibilité d’importer des libraires ou du code d’ailleurs.&lt;/p>
&lt;p>Il va de même pour le partage. Bostock se plaint que la majorité du code partagé partagé sur GitHub n’est pas accessible car nous devons repeter un nombre d’opérations pour le visualiser dans notre navigateur. Observable répond à ce problème en mettant à disposition un environnement partageable qui affiche directement le code qui le compose.&lt;/p>
&lt;h2 id="verdicte">Verdicte&lt;/h2>
&lt;p>La raison d’être de l’environnement est succintement expliquée par son créateur dans ces 4 points. Ayant utilisé l’environnement à divers buts, il est vrai qu’il répond à ces promesses mais derière cette élégante proposition, quelques problèmes se cachent.&lt;/p>
&lt;p>L’environnement est fortement accessible et en reposant sur JavaScript, des développeurs web ou encore des data scientists peuvent facilement faire le changement vers Observable ou le tester très rapidement. Certains développeurs l’utilise en effet à des buts de documentation interactive pour leurs projets GitHub.&lt;/p>
&lt;p>Dans mon usage, la puissance d&amp;rsquo;Obersvable est dans son accessibilité. De pouvoir partager et travailler de manière interactive sur du code (comme un GitHub live) et de pouvoir montrer en live les conséquences de notre code.&lt;/p>
&lt;p>Ceci est fortement utile dans des contextes où l&amp;rsquo;on travaille avec des personnes moins familiers avec le code ou qui on besoin d&amp;rsquo;un feedback plus visuel.&lt;/p>
&lt;h3 id="sources-">Sources :&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0">&lt;/a>&lt;a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0">https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>