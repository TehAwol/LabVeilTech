<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Techonologie on Blog de Mikkel</title><link>https://tehawol.github.io/LabVeilTech/categories/techonologie/</link><description>Recent content in Techonologie on Blog de Mikkel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 29 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tehawol.github.io/LabVeilTech/categories/techonologie/index.xml" rel="self" type="application/rss+xml"/><item><title>Proposition de pipe operator pour JavaScript</title><link>https://tehawol.github.io/LabVeilTech/posts/pipe-operator/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><guid>https://tehawol.github.io/LabVeilTech/posts/pipe-operator/</guid><description>Proposition de pipe operator pour JavaScript L’idée d’ajouter un pipe operator à JavaScript provient de deux propositions issues des languages F# par Microsoft et Hack par Facebook avec chacun leurs avantages et désavantages.
Les défenseurs de la proposition affirment que des fonctions imbriquées peuvent rapidement devenir complexes et illisibles. Pour combler ceci, ils veulent introduire l’opérateur “|&amp;gt;” à JavaScript.
Pour comprendre ce que cet opérateur peut apporter au language, regardons les deux propositions.</description><content>&lt;h1 id="proposition-de-pipe-operator-pour-javascript">Proposition de pipe operator pour JavaScript&lt;/h1>
&lt;p>L’idée d’ajouter un pipe operator à JavaScript provient de deux propositions issues des languages F# par Microsoft et Hack par Facebook avec chacun leurs avantages et désavantages.&lt;/p>
&lt;p>Les défenseurs de la proposition affirment que des fonctions imbriquées peuvent rapidement devenir complexes et illisibles. Pour combler ceci, ils veulent introduire l’opérateur “|&amp;gt;” à JavaScript.&lt;/p>
&lt;p>Pour comprendre ce que cet opérateur peut apporter au language, regardons les deux propositions.&lt;/p>
&lt;h2 id="fonctionnement-du-hack-pipe">Fonctionnement du Hack pipe&lt;/h2>
&lt;p>Voici un exemple de fonctions imbriquées avec et sans l’opérateur pipe:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#75715e">// Sans opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)));
&lt;span style="color:#75715e">// Avec opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="avantages">Avantages&lt;/h3>
&lt;p>L’opérateur n’a pas pour but de racocurcir des syntaxes mais plutôt les rendre plus accessibles / lisibles. Le hack pipe utilise le symbole % pour indiquer au pipe ou le résultat doit aller.&lt;/p>
&lt;p>L’opérateur tel qu’il est peut gérer les mots-clés &lt;strong>await&lt;/strong> et &lt;strong>yield&lt;/strong> sans syntaxe spéciale.&lt;/p>
&lt;h3 id="désavantages">Désavantages&lt;/h3>
&lt;p>Cette proposition peut très rapidement devenir lourd dû à l’usage du caractère % pour dénoter le résultat.&lt;/p>
&lt;p>Certains affirment que le Hack pipe n’est qu’une implémentation partielle du F# pipe plus complet et suggère un implémentation optionnelle sans le caractère % tel que le F# pipe.&lt;/p>
&lt;h2 id="fonctionnement-du-f-pipe">Fonctionnement du F# pipe&lt;/h2>
&lt;p>En reprenant le code de dessus:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#75715e">// Sans opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)));
&lt;span style="color:#75715e">// Avec opérateur pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="avantages-1">Avantages&lt;/h3>
&lt;p>La proposition du F# pipe n’utilise pas le caractère %, il applique automatiquement la fonction à sa droite à la variable à sa gauche. De ce fait il est moins verveux que le Hack pipe. Ceci le rend par exemple beaucoup plus performant lors de la déstructuration d’objets :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#a6e22e">first&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">last&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>};
&lt;span style="color:#75715e">// F# pipe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> ({&lt;span style="color:#a6e22e">first&lt;/span>,&lt;span style="color:#a6e22e">last&lt;/span>}) =&amp;gt; &lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">last&lt;/span>;
&lt;span style="color:#75715e">// Hack pipe sans déstructuration
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>.&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">%&lt;/span>.&lt;span style="color:#a6e22e">last&lt;/span>;
&lt;span style="color:#75715e">// Hack pipe avec déstructuration
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> (({&lt;span style="color:#a6e22e">first&lt;/span>,&lt;span style="color:#a6e22e">last&lt;/span>}) =&amp;gt; &lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">last&lt;/span>)(&lt;span style="color:#f92672">%&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le F# pipe se prête aussi mieux à des currifications de fonctions, à la cause une arité plus grand que 1 (fonctions prenant plus d’un arguments).&lt;/p>
&lt;h3 id="désavantages-1">Désavantages&lt;/h3>
&lt;p>Malheureusement la currification n’est pas toujours le meilleur choix en JavaScript, l’absence d’un opérateur “d’application partielle” en serait la cause. De ce fait, le F# pipe devient plus verbeux que sa concurrence.&lt;/p>
&lt;p>L’utilisation de mémoire n’est pas optimale avec cet opérateur à cause de la création et l’invocation de fonctions à chaque utilisation. De plus, les mots-clés &lt;strong>await&lt;/strong> et &lt;strong>yield&lt;/strong> ne fonctionnent pas avec.&lt;/p>
&lt;p>Finalement l’introduction du F# pipe pourrait amener à un ecosystème JavaScript dans lequel une moitié emploie fortement la currification et l’autre non.&lt;/p>
&lt;h2 id="utilisations">Utilisations&lt;/h2>
&lt;p>Un pipe opérateur dans JavaScript aurait 3 buts:&lt;/p>
&lt;ul>
&lt;li>Améliorer la syntaxe de fonctions imbriquées&lt;/li>
&lt;li>Post-processing de valeurs&lt;/li>
&lt;li>Permets l’enchainement d’opérations&lt;/li>
&lt;/ul>
&lt;p>Comme indiqué et montré ci-dessus, l’opérateur permet d’écrire des fonctions imbriquées complexes d’une manière beaucoup plus lisible et explicite. Ceci est grâce à l’enchainement d’opérations qui rend notre code plus logique et également moins verbeux.&lt;/p>
&lt;p>L’opérateur permet également du post processing de valeurs ou de fonctions sur une ligne au lieu de plusieurs au lieu de devoirs passer par des variables temporaires.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>L’introduction d’un opérateur pipe dans JavaScript pourrait apporter avec lui un nombre d’avantages et permettre d’écrire du code plus compréhensible. Cependant toutes les solutions proposées ont leurs désavantages.&lt;/p>
&lt;p>Des propositions alternatives pour répondre au même problème existent tel que “Function.pipe()” qui devrait nous permettre de déclarer une logique similaire avec des arrows fonctions. Mais tout comme le F# pipe, celui-ci ne permet pas l’utilisation de &lt;strong>await&lt;/strong> et &lt;strong>yield.&lt;/strong>&lt;/p>
&lt;p>Pour l’instant il est possible de contourner l’absence de ce opérateur en utilisant des variables temporaires pour nos calculs, le désavantage étant sa verbosité. On peut améliorer ceci en utilisant des variables avec des noms courts ce qui péjore la lisiblité du code.&lt;/p>
&lt;h2 id="à-retenir">À retenir&lt;/h2>
&lt;p>L’opérateur Hack pipe a été retenu comme proposition par TC39 à l’instar du F# pipe. Pour cause les faiblesses du F# pipe.&lt;/p>
&lt;p>Une future implémentation de cette opérateur pourrait drastiquement changer la logique et l’approche que nous prenons vis-à-vis de certaines opérations en améliorant la lisibilité du code dans certains cas de figure ou en permettant des enchainements.&lt;/p>
&lt;p>Cette introduction ne serait pas non plus un miracle pour le language car toutes les opérations mentionnées sont actuellements possibles bien qu’ils demandent une implémentation un peu plus complexe. Le pipe serait donc plus une amélioration du “quality of life” des développeurs.&lt;/p>
&lt;h3 id="sources-">Sources :&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://2ality.com/2022/01/pipe-operator.html?ref=webdesignernews.com">&lt;/a>&lt;a href="https://2ality.com/2022/01/pipe-operator.html?ref=webdesignernews.com">https://2ality.com/2022/01/pipe-operator.html?ref=webdesignernews.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tc39/proposal-pipeline-operator">GitHub - tc39/proposal-pipeline-operator: A proposal for adding a useful pipe operator to JavaScript.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205">Hack is dead. Long live F#. · Issue #205 · tc39/proposal-pipeline-operator · GitHub&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Web3, une solution miracle ?</title><link>https://tehawol.github.io/LabVeilTech/posts/web3/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://tehawol.github.io/LabVeilTech/posts/web3/</guid><description>Web3, une solution miracle ? Le Web3 ? Premièrement nous avons eu Web1 qui n’était autre que des documents web avec des hyperliens entre eux. En 2004 avec la démocratisation de l’internet, nous voyons l’émergence du Web2 qui contribue fortement à la croissance des GAFAs grâce à leurs diverses plateformes.
Aujourd’hui, nous serions à la limite du Web3, une version du web basé sur la cryto ou plus précisément les tokens.</description><content>&lt;h1 id="web3-une-solution-miracle-">Web3, une solution miracle ?&lt;/h1>
&lt;h2 id="le-web3-">Le Web3 ?&lt;/h2>
&lt;p>Premièrement nous avons eu Web1 qui n’était autre que des documents web avec des hyperliens entre eux. En 2004 avec la démocratisation de l’internet, nous voyons l’émergence du Web2 qui contribue fortement à la croissance des GAFAs grâce à leurs diverses plateformes.&lt;/p>
&lt;p>Aujourd’hui, nous serions à la limite du Web3, une version du web basé sur la cryto ou plus précisément les tokens. Un internet décentralisé qui élimine les intermédiaires (GAFA ou banques par exemple) dans les échanges d’information ou de monnaie entre utilisateurs finaux.&lt;/p>
&lt;p>Web3 repose sur la technologie blockchain pour créer un réseau décentralisé composées par ses utilisateurs. Chaque ordinateurs conserve l’entier (en pratique une partie) du ledger (un registre dans lequel les parties prenantes et les échanges sont inscrits), ce qui permet de valider qui est le détenteur de la ou les ressources concernées.&lt;/p>
&lt;h2 id="fonctionnements-et-promesses">Fonctionnements et promesses&lt;/h2>
&lt;p>Les défenseurs du Web3 veulent adapter ce fonctionnement pour que les échanges d’information personnelle deviennent une transaction. Par exemple, si on se connecte à une plateforme en fournissant notre email, lors de la déconnexion vous pourriez récupérer les données fournies grâce à des smart contracts (du code qui s’auto exécute pour accomplir le contrat).&lt;/p>
&lt;p>Les NFTs sont également considérés comme faisant partie du Web3. Un phénomène qui repose sur des tokens qui au lieu d’avoir une valeur “définit”, représentent des bouts de code (souvent des créations digitales) qui peuvent avoir des valeurs variables (un peu comme des oeuvres d’art).&lt;/p>
&lt;p>La technologie NFT devrait faciliter ou servir comme une des bases pour amener les notions de “propriété” et “propriétaire” dans le monde digital.&lt;/p>
&lt;p>Les proponants du Web3 affirment que ces nouvelles technologies devraient donner lieu à un internet plus décentralisé dans lequel les utilisateurs sont “propriétaires” de leurs données et sont récompensés pour leur participation dans les réseaux.&lt;/p>
&lt;h2 id="les-soucis">Les soucis&lt;/h2>
&lt;p>Plusieurs grands profils dans la technologie web (Elon Musk parmi eux) semblent penser que le futur de l’internet n’est pas avec Web3 et que ses promesses restent très floues.&lt;/p>
&lt;p>Ces monnaies sont souvent marketées comme une solution-miracle dans le monde de la finance, un “disruption” des acteurs classiques qui redonnerait le pouvoir au people. Ironiquement, certaines cryptomonnaies seraient en effet contrôlées par où financé par des acteurs de la Silicon Valley ou encore des banques d’investissement.&lt;/p>
&lt;p>La crypto est fait également face à 3 contraintes vis-à-vis de sa croissance :&lt;/p>
&lt;ul>
&lt;li>The Compute Problem : Plus le réseau s’étend, plus de calculs doivent être fait pour assurer son intégrité. Étant un énorme réseau décentralisé, chaque opération doit être exécutée par tout le réseau ce qui a une énorme coût en énergie.&lt;/li>
&lt;li>The Bandwidth Problem : Ces énormes réseaux sont impossibles à gérer dû à leur nature décentralisée. Qui paye pour ses réseaux? Qui gère les aspects légaux? Une telle opération demande un réseau centralisé qui peut gérer tous ces échanges.&lt;/li>
&lt;li>The Storage Problem : Web3 veut redonner à l’utilisateur les droits sur ses données. Mais finalement ces données sont stockées quelque part et de plus, les systèmes de stockages actuelles ne sont pas capables de fonctionner selon la logique d’échange d’informations que promet Web3.&lt;/li>
&lt;/ul>
&lt;h2 id="dans-quelle-direction-allons-nous-">Dans quelle direction allons nous ?&lt;/h2>
&lt;p>Diehl pense que Web3 va nous amener nulle part. Selon lui, la technologie n’est pas la solution-miracle qui va nous permettre de reprendre le contrôle de nos données et créer un internet (ou société) plus équitable et égalitaire.&lt;/p>
&lt;p>Delaney cependant, pense que Web3 peut prendre deux directions, dans le meilleure des cas Web3 répond à certaines de ses promesses au cours de prochaines années en révolutionnant l’industrie et l’échange d’information. L’alternative est que la bulle crypto va exploser tout comme la bulle dot-com en 2001, un phénomène qui va amènerait vers une fin ou un Web3 drastiquement différent.&lt;/p>
&lt;h2 id="a-retenir">A retenir&lt;/h2>
&lt;p>Bien que la Web3 ne soit pas encore là, les technologies sur lesquelles il repose le sont déjà. En conséquence tout développeur web doit en prendre conscience et acquérir les concepts de base afin de pouvoir travailler avec aujourd&amp;rsquo;hui et peut-être entièrement dans un futur Web3.&lt;/p>
&lt;p>Blockchain, BDD P2P, smart-contracts, IPFS ou encore OrbitDB, des technologies qui sont déjà employés et donc des notions importantes même si le Web3 venait à ne pas se réaliser.&lt;/p>
&lt;p>La réalisation du Web3 à également des énormes enjeux pour l&amp;rsquo;écosystème actuel et l&amp;rsquo;utilisateur final. À voir si c&amp;rsquo;est du &amp;ldquo;Fact or Fiction&amp;rdquo; comme dit le dicton anglais.&lt;/p>
&lt;h3 id="sources-">Sources :&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.stephendiehl.com/blog/web3-bullshit.html">&lt;/a>&lt;a href="https://www.stephendiehl.com/blog/web3-bullshit.html">Web3 is Bullshit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.infoworld.com/article/3646597/what-is-web3-a-new-decentralized-web-or-the-latest-marketing-buzzword.html">&lt;/a>&lt;a href="https://www.infoworld.com/article/3646597/what-is-web3-a-new-decentralized-web-or-the-latest-marketing-buzzword.html">What is Web3? A new decentralized web, or the latest marketing buzzword | InfoWorld&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=wHTcrmhskto">&lt;/a>&lt;a href="https://www.youtube.com/watch?v=wHTcrmhskto">Is Web3 all Hype? Top 10 Web 3.0 Questions &amp;amp; Answers - YouTube&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>